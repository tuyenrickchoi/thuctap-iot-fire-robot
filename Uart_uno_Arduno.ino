#include <SoftwareSerial.h>

#define SENSOR_PIN 2
#define BUZZER_PIN 3
#define RELAY_PIN 4
#define SPRINKLER_START_DELAY 1000

SoftwareSerial espSerial(8, 9); // RX t·ª´ ESP32 TX

unsigned long fireDetectedTime = 0;
bool isFire = false;
unsigned long ignoreSensorEndTime = 0;
bool isTemporarilyIgnoringSensor = false;
bool shouldBypassSprinklerDelay = false;

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(SENSOR_PIN, INPUT);  
  pinMode(BUZZER_PIN, OUTPUT);

  digitalWrite(RELAY_PIN, LOW); // T·∫Øt m√°y b∆°m ban ƒë·∫ßu
  analogWrite(BUZZER_PIN, 0);   // T·∫Øt c√≤i ban ƒë·∫ßu

  Serial.begin(9600);         
  espSerial.begin(9600);      

  Serial.println("üî• Arduino Uno s·∫µn s√†ng!");
  Serial.println("üü° ƒêang ch·ªù l·ªánh t·ª´ ESP32...");
}

void loop() {
  // ‚úÖ Nh·∫≠n l·ªánh t·ª´ ESP32
  if (espSerial.available()) {
    String command = espSerial.readStringUntil('\n');
    command.trim();

    Serial.println("[UART] Nh·∫≠n l·ªánh t·ª´ ESP32: " + command);

    if (command == "OFF") {
      digitalWrite(RELAY_PIN, LOW);  
      analogWrite(BUZZER_PIN, 0);    
      isTemporarilyIgnoringSensor = true;
      ignoreSensorEndTime = millis() + 3000; 
      shouldBypassSprinklerDelay = true; 
      Serial.println(">>> ƒê√£ T·∫ÆT m√°y b∆°m & c√≤i (OFF). B·ªè qua c·∫£m bi·∫øn 3 gi√¢y.");
    }

    // ‚úÖ X·ª≠ l√Ω l·ªánh PUMP ON t·ª´ ESP32
    else if (command == "ON") {
      digitalWrite(RELAY_PIN, HIGH);   // B·∫≠t m√°y b∆°m
      analogWrite(BUZZER_PIN, 40);     // B·∫≠t c√≤i nh·∫π
      isTemporarilyIgnoringSensor = true;
      ignoreSensorEndTime = millis() + 3000; // B·ªè qua c·∫£m bi·∫øn 3s ƒë·ªÉ tr√°nh can thi·ªáp ngay
      shouldBypassSprinklerDelay = false;
      Serial.println(">>> ƒê√£ B·∫¨T m√°y b∆°m th·ªß c√¥ng (ON). B·ªè qua c·∫£m bi·∫øn 3 gi√¢y.");
    }
  }

  // ‚è≥ B·ªè qua c·∫£m bi·∫øn t·∫°m th·ªùi (tr√°nh g√¢y nhi·ªÖu sau khi v·ª´a b·∫≠t/t·∫Øt th·ªß c√¥ng)
  if (isTemporarilyIgnoringSensor) {
    if (millis() >= ignoreSensorEndTime) {
      isTemporarilyIgnoringSensor = false;
      Serial.println("[TIMER] Th·ªùi gian b·ªè qua c·∫£m bi·∫øn ƒë√£ h·∫øt.");
    } else {
      return; // V·∫´n b·ªè qua
    }
  }

  // üî• X·ª≠ l√Ω c·∫£m bi·∫øn l·ª≠a
  int sensorValue = digitalRead(SENSOR_PIN);

  if (sensorValue == LOW) { // L·ª≠a ƒë∆∞·ª£c ph√°t hi·ªán
    analogWrite(BUZZER_PIN, 40);

    if (shouldBypassSprinklerDelay) {
      digitalWrite(RELAY_PIN, HIGH);
      Serial.println("[üíß] L·ª≠a c√≤n ph√°t hi·ªán sau OFF ‚Üí b·∫≠t m√°y b∆°m l·∫°i!");
      isFire = true;
      fireDetectedTime = millis();
      shouldBypassSprinklerDelay = false;
    } else {
      if (!isFire) {
        fireDetectedTime = millis();
        isFire = true;
        Serial.println("[üî•] Ph√°t hi·ªán l·ª≠a ‚Üí b·∫Øt ƒë·∫ßu ƒë·∫øm tr·ªÖ...");
      }

      if (millis() - fireDetectedTime >= SPRINKLER_START_DELAY) {
        digitalWrite(RELAY_PIN, HIGH);
        Serial.println("[üíß] B·∫≠t m√°y b∆°m v√¨ c√≥ l·ª≠a qu√° th·ªùi gian tr·ªÖ!");
      }
    }
  } else {
    if (isFire) Serial.println("[‚úî] Kh√¥ng c√≤n l·ª≠a ‚Üí t·∫Øt m√°y b∆°m");
    analogWrite(BUZZER_PIN, 0);
    digitalWrite(RELAY_PIN, LOW);
    isFire = false;
    shouldBypassSprinklerDelay = false;
  }
}
